package enum

import (
	"fmt"
	"io"
	"strconv"
)

var ComparatorKey = "comparator"
type Comparator string

// Please do not edit this file, consider making a new one with appending _edit in the namefile
// This file will be automatically regenerated by bendt-generator
// Changes in this File may be unsaved or replaced when regenerated

const (
	ComparatorBeginWith           Comparator = "BEGIN"
	ComparatorAnyWith             Comparator = "ANY"
	ComparatorEndWith             Comparator = "END"
	ComparatorEqualsTo            Comparator = "EQ"
	ComparatorGreaterThan         Comparator = "GT"
	ComparatorGreaterThanEqualsTo Comparator = "GTE"
	ComparatorLessThan            Comparator = "LT"
	ComparatorLessThanEqualsTo    Comparator = "LTE"
	ComparatorInclude             Comparator = "INC"
	ComparatorExclude             Comparator = "EXC"
	ComparatorBetween             Comparator = "BTW"
	ComparatorNotBetween          Comparator = "NBW"
)

var AllComparator = []Comparator{
	ComparatorBeginWith,
	ComparatorAnyWith,
	ComparatorEndWith,
	ComparatorEqualsTo,
	ComparatorGreaterThan,
	ComparatorGreaterThanEqualsTo,
	ComparatorLessThan,
	ComparatorLessThanEqualsTo,
	ComparatorInclude,
	ComparatorExclude,
	ComparatorBetween,
	ComparatorNotBetween,
}

func (e Comparator) IsValid() bool {
	switch e {
	case ComparatorBeginWith,
		ComparatorAnyWith,
		ComparatorEndWith,
		ComparatorEqualsTo,
		ComparatorGreaterThan,
		ComparatorGreaterThanEqualsTo,
		ComparatorLessThan,
		ComparatorLessThanEqualsTo,
		ComparatorInclude,
		ComparatorExclude,
		ComparatorBetween,
		ComparatorNotBetween:
		return true
	}
	return false
}

func (e Comparator) String() string {
	return string(e)
}

func (e *Comparator) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Comparator(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Comparator", str)
	}
	return nil
}

func (e Comparator) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
